// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Error {
    id        Int      @id @default(autoincrement())
    msg       String
    title     String
    date      DateTime @default(now())
    email     String

    people People @relation(fields: [email], references: [email])
}

model People {
    id        Int    @unique @default(autoincrement())
    name      String @db.VarChar(100)
    email     String @id @db.VarChar(100)
    password  String

    errors   Error[]
    Students Student[]
}

model Student {
    id            Int     @unique @default(autoincrement())
    register      String  @id @db.VarChar(12)
    score         Float   @default(0)
    active        Boolean @default(true)
    init_semester String

    email         String
    cod_course    String
    complement_activity ComplementActivity[]
    subjects            SubjectStudent[]

    people People @relation(fields: [email], references: [email])
    course Course @relation(fields: [cod_course], references: [cod_course])
}

model Center {
    id         Int    @unique @default(autoincrement())
    cod_center String @id @db.VarChar(10)
    name       String @db.VarChar(100)

    courses  Course[]
    subjects Subject[]
}

model Course {
    id                    Int    @unique @default(autoincrement())
    cod_course            String @id @db.VarChar(10)
    name                  String
    workload_S_required   Float  @default(0)
    workload_S_optional   Float  @default(0)
    workload_S_complement Float  @default(0)

    students               Student[]
    course_require_subject CourseRequireSubject[]
    subject_requires       SubjectRequireSubject[]
    cod_center             String

    center Center @relation(fields: [cod_center], references: [cod_center])
}

model Subject {
    id Int @unique @default(autoincrement())

    subject_code String @id @db.VarChar(10)
    name         String @db.VarChar(100)
    workload     Float  @default(0)

    cod_center String
    students   SubjectStudent[]
    requested  CourseRequireSubject[]
    unlock     SubjectRequireSubject[]

    center Center @relation(fields: [cod_center], references: [cod_center])
}

model ComplementActivity {
    id Int    @unique @default(autoincrement())
    title                  String
    type_activity          String
    register               String

    @@id([title, register])
    student Student @relation(fields: [register], references: [register])
    type TypeComplementActivity @relation(fields: [type_activity], references: [type_activity])
}

model TypeComplementActivity {
    id                Int    @unique @default(autoincrement())
    type_activity     String  @id @db.VarChar(100)
    value             Float

    activities ComplementActivity[]
    
}

model CourseRequireSubject {
    id Int @unique @default(autoincrement())

    optional Boolean @default(false)
    semester String
    weight   Float   @default(0)

    cod_course   String
    subject_code   String @unique
    requirements SubjectRequireSubject[]
    
    @@id([cod_course, subject_code])

    course  Course  @relation(fields: [cod_course], references: [cod_course])
    subject Subject @relation(fields: [subject_code], references: [subject_code])
}

model SubjectStudent {
    id                 Int @unique @default(autoincrement())
    status             String
    score              Float  @default(0)
    semester           String @db.VarChar(6)

    subject_code String
    register   String

    @@id([subject_code, register])

    subject Subject @relation(fields: [subject_code], references: [subject_code])
    student Student @relation(fields: [register], references: [register])
}

model SubjectRequireSubject {
    id Int @unique @default(autoincrement())

    cod_course String
    subject_code String
    require_s_code String

    @@id([subject_code, require_s_code, cod_course])

    course  Course               @relation(fields: [cod_course], references: [cod_course]) 
    subject Subject              @relation(fields: [subject_code], references: [subject_code])
    require CourseRequireSubject @relation(fields: [require_s_code], references: [subject_code])
}
